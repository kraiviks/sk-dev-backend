// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//Settings
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

//Models

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  email     String    @unique
  password  String
  firstname String
  lastname  String
  bio       String? // Optional
  avatar    String? // Optional
  articles     Article[] // One-to-Many relationship with Article
  comments  Comment[] // One-to-Many relationship with Comment
  likes     Like[] // One-to-Many relationship with Like
  following Follow[]  @relation("Following")
  followers Follow[]  @relation("Followers")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Article {
  id          String    @id @default(uuid())
  title       String
  slug        String
  content     String
  description String
  image       String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  comments    Comment[] // One-to-Many relationship with Comment
  likes       Like[] // One-to-Many relationship with Like
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  likes     Like[] // One-to-Many relationship with Like
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  acticle   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
  createdAt DateTime @default(now())
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Followers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
}
